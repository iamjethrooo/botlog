generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String        @id @default(cuid())
  name              String?
  discordId         String        @unique
  email             String?       @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  guilds            Guild[]
  reminders         Reminder[]
  items             Inventory[]
  timeOffset        Int?
  failedRobAttempts Int           @default(0)
  lastMessageDate   String        @default("0")
  lastRobDate       String        @default("0")
  lastHeistDate     String        @default("0")
  lastCoinFlipDate  String        @default("0")
  lastBodyguardDate String        @default("0")
  jailTime          String        @default("0")
  cash              Int           @default(0)
  birthday          String        @default("0")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Guild {
  id                    String        @id
  name                  String
  added                 DateTime      @default(now())
  volume                Int           @default(100)
  notifyList            String[]
  ownerId               String
  owner                 User          @relation(fields: [ownerId], references: [discordId])
  bank                  Int           @default(0)
  thievesBank           Int           @default(0)
  // Settings
  disabledCommands      String[]      @map("disabled_commands")
  logChannel            String?       @map("log_channel")
  welcomeMessageChannel String?       @map("welcome_message_channel")
  welcomeMessage        String?       @map("welcome_message")
  welcomeMessageEnabled Boolean       @default(false) @map("welcome_message_enabled")
  // Temp Channels
  hub                   String?
  hubChannel            String?       @map("hub_channel") // The channel that users enter to get redirected
  tempChannels          TempChannel[]
}

model Setting {
  id            Int @id @default(autoincrement())
  guildId       String
  settingKey    String @unique
  settingValue  String
}

model Topic {
  id              Int @id @default(autoincrement())
  guildId         String
  messageContent  String @default("")
  lastSentAt      String @default("")
}

model TempChannel {
  id      String @id
  guildId String
  guild   Guild  @relation(fields: [guildId], references: [id])
  ownerId String @unique
}

model Reminder {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  repeat      String?
  event       String
  description String?
  dateTime    String
  userId      String
  user        User?    @relation(fields: [userId], references: [discordId])
  timeOffset  Int
}

model Item {
  id                Int       @id @default(autoincrement())
  name              String    @unique
  emoji             String?
  description       String?
  stackable         Boolean   @default(false)
  consumable        Boolean   @default(true)
  buyPrice          Int
  stock             Int       @default(0)
  holders           Inventory[]
  roleGiven         String?
}

model Inventory {
  userId    String
  itemId    Int
  amount    Int
  user      User    @relation(fields: [userId], references: [discordId], onDelete: Cascade)
  item      Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  @@id([userId, itemId])
}

model StarboardMessage {
  messageId   String    @id
  channelId   String
}

model NicknameChangeRequest {
  id          Int @id @default(autoincrement())
  requesterId String
  targetId    String
  newNickname String
  expires_at  String
}

model UserNickname {
  userId    String @id
  nickname  String
}

model Giveaway {
  messageId     String @default("")
  giveawayId    String @id
  hostId        String @default("")
  prize         String
  numOfWinners  Int @default(1)
  numOfEntries  Int @default(1)
  entryFee      String  @default("0")
  endsAt        String  @default("0")
  dateStarted   String
  ended         Boolean @default(false)
}

model GiveawayEntry {
  id          Int @id @default(autoincrement())
  giveawayId  String
  userId      String
}